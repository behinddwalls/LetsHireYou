package com.portal.job.dao.model;

// Generated Nov 15, 2015 11:59:15 AM by Hibernate Tools 4.3.1

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * JobRelationshipDetail generated by hbm2java
 */
@Entity
@Table(name = "job_relationship_detail", catalog = "jobPortal", uniqueConstraints = @UniqueConstraint(columnNames = {
		"job_id", "jobseeker_id" }))
public class JobRelationshipDetail implements java.io.Serializable {

	private Long jobRelationshipId;
	private JobDetail jobDetail;
	private UserDetail userDetailByExpertId;
	private UserDetail userDetailByRecruiterId;
	private UserDetail userDetailByJobseekerId;
	private String jobApplicationStatus;
	private String recruiterApplicationStatus;
	private String jobSeekerApplicationStatus;
	private Date rejectedDate;
	private String expertApplicationStatus;
	private String expertAssessment;
	private byte isInJobseekerWishlist;
	private byte isInRecruiterWishlist;
	private Date createDate;
	private Date modifiedDate;

	public JobRelationshipDetail() {
	}

	public JobRelationshipDetail(JobDetail jobDetail,
			UserDetail userDetailByRecruiterId,
			UserDetail userDetailByJobseekerId, byte isInJobseekerWishlist,
			byte isInRecruiterWishlist, Date createDate, Date modifiedDate) {
		this.jobDetail = jobDetail;
		this.userDetailByRecruiterId = userDetailByRecruiterId;
		this.userDetailByJobseekerId = userDetailByJobseekerId;
		this.isInJobseekerWishlist = isInJobseekerWishlist;
		this.isInRecruiterWishlist = isInRecruiterWishlist;
		this.createDate = createDate;
		this.modifiedDate = modifiedDate;
	}

	public JobRelationshipDetail(JobDetail jobDetail,
			UserDetail userDetailByExpertId,
			UserDetail userDetailByRecruiterId,
			UserDetail userDetailByJobseekerId, String jobApplicationStatus,
			String recruiterApplicationStatus,
			String jobSeekerApplicationStatus, Date rejectedDate,
			String expertApplicationStatus, String expertAssessment,
			byte isInJobseekerWishlist, byte isInRecruiterWishlist,
			Date createDate, Date modifiedDate) {
		this.jobDetail = jobDetail;
		this.userDetailByExpertId = userDetailByExpertId;
		this.userDetailByRecruiterId = userDetailByRecruiterId;
		this.userDetailByJobseekerId = userDetailByJobseekerId;
		this.jobApplicationStatus = jobApplicationStatus;
		this.recruiterApplicationStatus = recruiterApplicationStatus;
		this.jobSeekerApplicationStatus = jobSeekerApplicationStatus;
		this.rejectedDate = rejectedDate;
		this.expertApplicationStatus = expertApplicationStatus;
		this.expertAssessment = expertAssessment;
		this.isInJobseekerWishlist = isInJobseekerWishlist;
		this.isInRecruiterWishlist = isInRecruiterWishlist;
		this.createDate = createDate;
		this.modifiedDate = modifiedDate;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "job_relationship_id", unique = true, nullable = false)
	public Long getJobRelationshipId() {
		return this.jobRelationshipId;
	}

	public void setJobRelationshipId(Long jobRelationshipId) {
		this.jobRelationshipId = jobRelationshipId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "job_id", nullable = false)
	public JobDetail getJobDetail() {
		return this.jobDetail;
	}

	public void setJobDetail(JobDetail jobDetail) {
		this.jobDetail = jobDetail;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "expert_id")
	public UserDetail getUserDetailByExpertId() {
		return this.userDetailByExpertId;
	}

	public void setUserDetailByExpertId(UserDetail userDetailByExpertId) {
		this.userDetailByExpertId = userDetailByExpertId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "recruiter_id", nullable = false)
	public UserDetail getUserDetailByRecruiterId() {
		return this.userDetailByRecruiterId;
	}

	public void setUserDetailByRecruiterId(UserDetail userDetailByRecruiterId) {
		this.userDetailByRecruiterId = userDetailByRecruiterId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "jobseeker_id", nullable = false)
	public UserDetail getUserDetailByJobseekerId() {
		return this.userDetailByJobseekerId;
	}

	public void setUserDetailByJobseekerId(UserDetail userDetailByJobseekerId) {
		this.userDetailByJobseekerId = userDetailByJobseekerId;
	}

	@Column(name = "job_application_status", length = 100)
	public String getJobApplicationStatus() {
		return this.jobApplicationStatus;
	}

	public void setJobApplicationStatus(String jobApplicationStatus) {
		this.jobApplicationStatus = jobApplicationStatus;
	}

	@Column(name = "recruiter_application_status", length = 100)
	public String getRecruiterApplicationStatus() {
		return this.recruiterApplicationStatus;
	}

	public void setRecruiterApplicationStatus(String recruiterApplicationStatus) {
		this.recruiterApplicationStatus = recruiterApplicationStatus;
	}

	@Column(name = "jobSeeker_application_status", length = 100)
	public String getJobSeekerApplicationStatus() {
		return this.jobSeekerApplicationStatus;
	}

	public void setJobSeekerApplicationStatus(String jobSeekerApplicationStatus) {
		this.jobSeekerApplicationStatus = jobSeekerApplicationStatus;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "rejected_date", length = 10)
	public Date getRejectedDate() {
		return this.rejectedDate;
	}

	public void setRejectedDate(Date rejectedDate) {
		this.rejectedDate = rejectedDate;
	}

	@Column(name = "expert_application_status", length = 100)
	public String getExpertApplicationStatus() {
		return this.expertApplicationStatus;
	}

	public void setExpertApplicationStatus(String expertApplicationStatus) {
		this.expertApplicationStatus = expertApplicationStatus;
	}

	@Column(name = "expert_assessment", length = 65535)
	public String getExpertAssessment() {
		return this.expertAssessment;
	}

	public void setExpertAssessment(String expertAssessment) {
		this.expertAssessment = expertAssessment;
	}

	@Column(name = "is_in_jobseeker_wishlist", nullable = false)
	public byte getIsInJobseekerWishlist() {
		return this.isInJobseekerWishlist;
	}

	public void setIsInJobseekerWishlist(byte isInJobseekerWishlist) {
		this.isInJobseekerWishlist = isInJobseekerWishlist;
	}

	@Column(name = "is_in_recruiter_wishlist", nullable = false)
	public byte getIsInRecruiterWishlist() {
		return this.isInRecruiterWishlist;
	}

	public void setIsInRecruiterWishlist(byte isInRecruiterWishlist) {
		this.isInRecruiterWishlist = isInRecruiterWishlist;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "create_date", nullable = false, length = 19)
	public Date getCreateDate() {
		return this.createDate;
	}

	public void setCreateDate(Date createDate) {
		this.createDate = createDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "modified_date", nullable = false, length = 19)
	public Date getModifiedDate() {
		return this.modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		this.modifiedDate = modifiedDate;
	}

}
